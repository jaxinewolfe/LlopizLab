diet_2013_2015$preytype <- trimws(gsub('([[:upper:]])', ' \\1',
diet_2013_2015$preytype))
# load resolved data
man.data <- read_csv(file.path(valid_path,"Llopiz_resolved.csv"))
# merge data with ITIS resolved names and specified categorizations
diet_all <- left_join(x = diet_2013_2015, y = man.data,
by=(c("preytype"="Llopiz_preytypes")))
write.csv(diet_all, file.path("NESLTER_Diet_Taxa_2013_2015.csv"))
# Data is in long format
# I will be using the diet_Justin df
# NOTE: The smallest individual unit is Cruise_Station_FishSpecies
# These summary sheets can be exported as needed
# Generate summary sheet with prey totals per Cruise_Station_FishSpecies
sca_preytot <- diet_2013_2015 %>%
filter(count != "NA") %>%
group_by(Cruise, Station, Species, resolved_higher_order_fromgnr) %>%
# add prey items across fish from the same cruise and station
summarize(PreyTotal = sum(count))
# Data is in long format
# I will be using the diet_Justin df
# NOTE: The smallest individual unit is Cruise_Station_FishSpecies
# These summary sheets can be exported as needed
# Generate summary sheet with prey totals per Cruise_Station_FishSpecies
sca_preytot <- diet_all %>%
filter(count != "NA") %>%
group_by(Cruise, Station, Species, resolved_higher_order_fromgnr) %>%
# add prey items across fish from the same cruise and station
summarize(PreyTotal = sum(count))
sca_percent <- sca_preytot %>%
group_by(Species) %>%
# add column for percent composition
mutate(PreyPercent = (PreyTotal/sum(PreyTotal))*100)
# write.csv("LTER_SCA_percent.csv")
# Generate summary sheet with grand prey totals and richness
sca_summary <- sca_preytot %>%
group_by(Cruise, Station, Species) %>%
summarise(TotalCount = sum(PreyTotal),
PreyRichness = length(unique(resolved_higher_order_fromgnr)))
# Percent composition
# remember percentages are calculated for Cruise_Station_FishSpecies
ggplot(data = sca_percent, aes(Species, PreyPercent, fill = resolved_higher_order_fromgnr)) +
geom_col() +
# scale_fill_brewer(palette = "Set3") +
labs(title = "Diet Composition Per Fish", x = "Fish Species", y = "Percent Composition") +
theme_classic()
ggsave("RelAbund_total.jpg")
# Percent composition
# remember percentages are calculated for Cruise_Station_FishSpecies
ggplot(data = sca_percent, aes(Species, PreyPercent, fill = resolved_higher_order_fromgnr)) +
geom_col() +
# scale_fill_brewer(palette = "Set3") +
labs(title = "Diet Composition Per Fish", x = "Fish Species", y = "Percent Composition") +
theme_classic()
cruises <- unique(diet_all$Cruise)
cruises
str(cruises)
cruises <- unique(diet_all$Cruise)
# Percent composition
# remember percentages are calculated for Cruise_Station_FishSpecies
ggplot(data = sca_percent, aes(Species, PreyPercent, fill = resolved_higher_order_fromgnr)) +
geom_col() +
# scale_fill_brewer(palette = "Set3") +
labs(title = "Diet Composition Per Fish", x = "Fish Species", y = "Percent Composition") +
theme_classic()
# ggsave("RelAbund_total.jpg")
# Percent composition
# remember percentages are calculated for Cruise_Station_FishSpecies
ggplot(data = sca_percent, aes(Species, PreyPercent, fill = resolved_higher_order_fromgnr)) +
geom_col() +
scale_fill_brewer(palette = "Set3") +
labs(title = "Diet Composition Per Fish", x = "Fish Species", y = "Percent Composition") +
theme_classic()
# Percent composition
# remember percentages are calculated for Cruise_Station_FishSpecies
ggplot(data = sca_percent, aes(Species, PreyPercent, fill = resolved_higher_order_fromgnr)) +
geom_col() +
scale_fill_brewer(palette = "Set3", na.value = "grey50") +
labs(title = "Diet Composition Per Fish", x = "Fish Species", y = "Percent Composition") +
theme_classic()
# Percent composition
# remember percentages are calculated for Cruise_Station_FishSpecies
ggplot(data = sca_percent, aes(Species, PreyPercent, fill = resolved_higher_order_fromgnr)) +
geom_col() +
# scale_fill_brewer(palette = "Set3", na.value = "grey50") +
labs(title = "Diet Composition Per Fish", x = "Fish Species", y = "Percent Composition") +
theme_classic()
# Percent composition
# remember percentages are calculated for Cruise_Station_FishSpecies
ggplot(data = sca_percent, aes(Species, PreyPercent, fill = resolved_higher_order_fromgnr)) +
geom_col() +
scale_fill_brewer(palette = "Set2", na.value = "grey50") +
labs(title = "Diet Composition Per Fish", x = "Fish Species", y = "Percent Composition") +
theme_classic()
# Percent composition
# remember percentages are calculated for Cruise_Station_FishSpecies
ggplot(data = sca_percent, aes(Species, PreyPercent, fill = resolved_higher_order_fromgnr)) +
geom_col() +
scale_fill_brewer(palette = "Paired", na.value = "grey50") +
labs(title = "Diet Composition Per Fish", x = "Fish Species", y = "Percent Composition") +
theme_classic()
# Percent composition
# remember percentages are calculated for Cruise_Station_FishSpecies
ggplot(data = sca_percent, aes(Species, PreyPercent, fill = resolved_higher_order_fromgnr)) +
geom_col() +
scale_fill_brewer(palette = "Set3", na.value = "grey50") +
labs(title = "Diet Composition Per Fish", x = "Fish Species", y = "Percent Composition") +
theme_classic()
# Install from GitHub
remotes::install_github("EDIorg/EMLassemblyline")
install.packages("remotes")
# Install from GitHub
remotes::install_github("EDIorg/EMLassemblyline")
# set working directory
my_path <- "/Users/jaxinewolfe/Documents/Research/PEP/NESLTER/Data/LlopizLab/Abundance/itis_validation"
# set working directory
my_path <- "/Users/jaxinewolfe/Documents/Research/PEP/NESLTER/Data/LlopizLab/Abundance/itis_validation"
setwd(my_path)
# load necessary dataset
dietdata <- read_csv("Forage_Fish_Diet_Data_2013_2015_wide.csv")
dietdata[is.na(dietdata)] <- 0 # convert empties to 0
diet.long <- dietdata %>%
gather(preytype,count, Centropages_spp:Unknown, factor_key = TRUE) %>%
filter(count != 0) # can be modified to filter out unwanted prey items
# write.csv(diet.long, "Forage_Fish_Diet_Data_2013_2015_long.csv")
# NOTE: Wrap the following code into a function
# Load 2013-2015 diet data
preytype_Justin <- read.csv("Forage_Fish_Diet_Data_2013_2015_long.csv",
header = TRUE) %>% select(preytype)
# Isolate and clean preytype columns
preytype_Justin <- trimws(gsub('([[:upper:]])', ' \\1',
unique(preytype_Justin$preytype)))
# Load 201802 Cruise diet data
preytype_Sarah <- read.csv("LTER201802_StomachData_LTERFFSizes.csv",
header = TRUE) %>% select(PreySpecies)
preytype_Sarah <- trimws(gsub('([[:upper:]])', ' \\1',
unique(preytype_Sarah$PreySpecies)))
# merge unique Llopiz preytypes
Llopiz_preytypes <- unique(c(preytype_Justin,preytype_Sarah))
# write_csv(as.data.frame(Llopiz_preytypes),
#           path = file.path(my_path, "Llopiz_preytypes.csv"))
# NOTE: manually added a preytype_validated column for ease of GNR
rm(list = ls())
# load library
library(tidyverse)
# set working directory
my_path <- "/Users/jaxinewolfe/Documents/Research/PEP/NESLTER/Data/LlopizLab/Abundance/itis_validation"
setwd(my_path)
# load necessary dataset
dietdata <- read_csv("Forage_Fish_Diet_Data_2013_2015_wide.csv")
dietdata[is.na(dietdata)] <- 0 # convert empties to 0
diet.long <- dietdata %>%
gather(preytype,count, Centropages_spp:Unknown, factor_key = TRUE) %>%
filter(count != 0) # can be modified to filter out unwanted prey items
# write.csv(diet.long, "Forage_Fish_Diet_Data_2013_2015_long.csv")
# NOTE: Wrap the following code into a function
# Load 2013-2015 diet data
preytype_Justin <- read.csv("Forage_Fish_Diet_Data_2013_2015_long.csv",
header = TRUE) %>% select(preytype)
# Isolate and clean preytype columns
preytype_Justin <- trimws(gsub('([[:upper:]])', ' \\1',
unique(preytype_Justin$preytype)))
# Load 201802 Cruise diet data
preytype_Sarah <- read.csv("LTER201802_StomachData_LTERFFSizes.csv",
header = TRUE) %>% select(PreySpecies)
preytype_Sarah <- trimws(gsub('([[:upper:]])', ' \\1',
unique(preytype_Sarah$PreySpecies)))
# merge unique Llopiz preytypes
Llopiz_preytypes <- unique(c(preytype_Justin,preytype_Sarah))
# write_csv(as.data.frame(Llopiz_preytypes),
#           path = file.path(my_path, "Llopiz_preytypes.csv"))
# NOTE: manually added a preytype_validated column for ease of GNR
knitr::opts_chunk$set(echo = TRUE)
library(taxize)
# library(worrms)
library(plyr)
library(dplyr)
# library(tcltk)
# local development only
rm(list=ls())
# man.data <- read.csv(file.choose())
# man.data <- read.csv(tk_choose.files(caption = "Choose a .csv file to validate"))
my_path <- "/Users/jaxinewolfe/Documents/Research/PEP/NESLTER/Data/LlopizLab/Abundance/itis_validation"
setwd(my_path)
# wrapper function to call taxize get_wormsid function and put data into appropriate column
acquire_id <- function(resolved_name, counter, man.data) {
response <- taxize::get_tsn(
resolved_name,
searchtype = 'scientific',
accepted = TRUE,
ask = FALSE,
messages = FALSE
)
# check if name was able to return an id from itis
response <- as.data.frame(response)
if (!empty(response)) {
# standardize resolved name to retrieve id
resolved_name <- gsub(" ", ".", resolved_name, fixed=TRUE)
resolved_name <- gsub("-", ".", resolved_name, fixed=TRUE)
# get.id <- paste(resolved_name, sep='.', "ids") #?
# Pull highest order taxon id
resolved_id <- response$ids
man.data$resolved_id_fromgnr[counter] <<- resolved_id
# sets data_source column if original name could not be resolved through gnr
man.data$data_source[counter] <<- "ITIS"
} # else leaves columns with original NA values
}
# retrieves taxon information based on name
name2taxoninfo <- function(tx_name, counter, man.data) {
# use itis db to get taxon level
taxon_level <- unlist(tax_rank(tx_name, db='itis', rows=1))
man.data$resolved_taxon_level_fromgnr[counter] <<- taxon_level
# use taxize classification function to get higher order (class, infraphylum, phylum)
hierarchy <- taxize::classification(tx_name, db='itis', rows=1)
# get class, infraphylum, and phylum
hierarchy <- as.data.frame(hierarchy[[1]])
genus <- hierarchy$name[hierarchy$rank == "genus"]
order <- hierarchy$name[hierarchy$rank == "order"]
class <- hierarchy$name[hierarchy$rank == "class"]
phylum <- hierarchy$name[hierarchy$rank == "phylum"]
# check which of the main groups tx_name falls under and assign bins
if (!identical(character(0), class) && class == "Appendicularia") {
man.data$resolved_higher_order_fromgnr[counter] <<- "Appendicularian"
} else if (!identical(character(0), order) && order == "Amphipoda") {
man.data$resolved_higher_order_fromgnr[counter] <<- "Amphipod"
} else if (!identical(character(0), order) && order == "Euphausiacea") {
man.data$resolved_higher_order_fromgnr[counter] <<- "Krill"
} else if (!identical(character(0), phylum) && phylum == "Chaetognatha") {
man.data$resolved_higher_order_fromgnr[counter] <<- "Chaetognath"
} else if (!identical(character(0), order) && order == "Calanoida") {
if (!identical(character(0), genus) && genus == "Centropages") {
man.data$resolved_higher_order_fromgnr[counter] <<- "Centropages"
} else if (!identical(character(0), genus) && genus == "Calanus") {
man.data$resolved_higher_order_fromgnr[counter] <<- "Calanus"
} else {
man.data$resolved_higher_order_fromgnr[counter] <<- "Other Calanoids"
}
} else {
man.data$resolved_higher_order_fromgnr[counter] <<- "Other"
}
}
# retrieves taxon info based on id: level, name, and higher order
id2taxoninfo <- function(tsn, counter, man.data) {
# populate taxon_level
taxon_level <- unlist(id2name(tsn, db = 'itis')[[1]]$rank)
# alt option: unlist(tax_rank(tsn, db='itis', rows=1))
man.data$taxon_level_fromid[counter] <<- taxon_level
# populate taxon_name
taxon_name <- unlist(id2name(tsn, db = 'itis')[[1]]$name)
man.data$taxon_name_fromid[counter] <<- taxon_name
# populate higher_order
hierarchy <- as.data.frame(classification(tsn, db='itis', rows=1)[[1]])
# only set resolved id in the case that the resolved id doesn't exist yet
# if (is.na(man.data$resolved_higher_order_fromgnr[counter])) {
#   taxon_level <- tools::toTitleCase(taxon_level)
#   man.data$resolved_id_fromgnr[counter] <<- hierarchy$id[hierarchy$rank == taxon_level]
# }
# get genus, order,class, and phylum
genus <- hierarchy$name[hierarchy$rank == "genus"]
order <- hierarchy$name[hierarchy$rank == "order"]
class <- hierarchy$name[hierarchy$rank == "class"]
phylum <- hierarchy$name[hierarchy$rank == "phylum"]
# check which of the main groups tx_name falls under and assign bins
if (!identical(character(0), class) && class == "Appendicularia") {
man.data$resolved_higher_order_fromgnr[counter] <<- "Appendicularian"
} else if (!identical(character(0), order) && order == "Amphipoda") {
man.data$resolved_higher_order_fromgnr[counter] <<- "Amphipod"
} else if (!identical(character(0), order) && order == "Euphausiacea") {
man.data$resolved_higher_order_fromgnr[counter] <<- "Krill"
} else if (!identical(character(0), phylum) && phylum == "Chaetognatha") {
man.data$resolved_higher_order_fromgnr[counter] <<- "Chaetognath"
} else if (!identical(character(0), order) && order == "Calanoida") {
if (!identical(character(0), genus) && genus == "Centropages") {
man.data$resolved_higher_order_fromgnr[counter] <<- "Centropages"
} else if (!identical(character(0), genus) && genus == "Calanus") {
man.data$resolved_higher_order_fromgnr[counter] <<- "Calanus"
} else {
man.data$resolved_higher_order_fromgnr[counter] <<- "Other Calanoids"
}
} else {
man.data$resolved_higher_order_fromgnr[counter] <<- "Other"
}
# sets data_source column if original name could not be resolved through gnr
# man.data$data_source[counter] <<- "World Register of Marine Species"
man.data$data_source[counter] <<- "ITIS"
}
# helper function to fill in information for abiotic classes
edge_case <- function(name, counter) {
if(name == "Fish Remains"|
name == "Other"| name == "Unknown Soft" |
name == "Parasite" | is.na(name)) {
man.data$data_source[counter] <<- "OCB"
man.data$resolved_higher_order_fromgnr[counter] <<- toString(name)
return(TRUE)
}
return(FALSE)
}
# manually added a preytype_validated column for ease of GNR
preytype_lookup <- read_csv("Llopiz_preytypes.csv")
# set preytype validated column as man.data
man.data <- preytype_lookup %>% select(preytype_validated)
# Resolve names
counter <- 1
# column names
# man.data$tsn_id <- NA_character_
man.data$resolved_names <- NA_character_
man.data$taxon_level_fromid <- NA_character_
man.data$taxon_name_fromid <- NA_character_
man.data$higher_order_fromid <- NA_character_
man.data$data_source <- NA_character_
man.data$resolved_id_fromgnr <- NA_character_
man.data$resolved_taxon_level_fromgnr <- NA_character_
man.data$resolved_higher_order_fromgnr <- NA_character_
man.data$name_match <- FALSE
# man.data$id_match <- FALSE
man.data$higher_match <- FALSE
# man.data$alt_datasource <- NA_character_
# man.data$alt_resolved_name <- NA_character_
# reorder columns
man.data[,c("preytype_validated", "resolved_names", "taxon_level_fromid", "taxon_name_fromid", "higher_order_fromid", "data_source", "resolved_id_fromgnr", "resolved_taxon_level_fromgnr", "resolved_higher_order_fromgnr", "name_match", "higher_match")]
# loop through all rows
for (row in 1:nrow(man.data)) {
# first check if name is abiotic
if (edge_case(man.data$preytype_validated[counter], counter)) {
# skip to next row if true
counter <- counter + 1
next
}
# try to resolve the name with gnr
temp <- gnr_resolve(names = as.vector(man.data$preytype_validated[counter]),
canonical = T, best_match_only = T,
preferred_data_sources = c(3, 4))
# 9 = worms
# 4 = ncbi
# 3 = itis
# hardcoded from data sources: https://resolver.globalnames.org/data_sources
# set primary data source
primary_ds <- "ITIS"
# check if able to resolve name
if (!empty(temp)) {
# add to resolved_names column
resolved_name <- unlist(temp[1, 'matched_name2'])
man.data$resolved_names[counter] <- resolved_name
# add to data_source or alt_ds column
authority <- unlist(temp[1, 'data_source_title'])
# add to data_source if ITIS or alt_ds for other
if (authority == primary_ds) {
man.data$data_source[counter] <- authority
} else {
man.data$data_source[counter] <- authority
man.data$resolved_names[counter] <- resolved_name
}
# edge case: check if tsn_id does not exist in input file() taxon_level, name, higher order are false)
if (man.data$resolved_id_fromgnr[counter] == -999 |
is.na(man.data$resolved_id_fromgnr[counter])) {
# call helper function to retrieve ID from resolved name
acquire_id(resolved_name, counter, man.data)
# retrieve taxon level from resolved_name
name2taxoninfo(resolved_name, counter, man.data)
# higher_match, id_match, and name_match remain false as original ID did not exist
}
# else tsn_id does exist in input file
else {
# set resolved_id from resolved_name
acquire_id(resolved_name, counter, man.data)
# call helper function to retrieve taxon info from resolved_name
name2taxoninfo(resolved_name, counter, man.data)
# call helper function to retrieve taxon info from id
id2taxoninfo(man.data$resolved_id_fromgnr[counter], counter, man.data)
# check if taxon name matches with resolved
if (man.data$taxon_name_fromid[counter] == man.data$resolved_names[counter]) {
# set name_match to true
man.data$name_match[counter] <- TRUE
}
# check if id matches with resolved
# if (man.data$tsn_id[counter] == man.data$resolved_id_fromgnr[counter]) {
#   # set id_match to true
#   man.data$id_match[counter] <- TRUE
# }
# check if higher order matches with resolved
if (man.data$higher_order_fromid[counter] == man.data$resolved_higher_order_fromgnr[counter]) {
man.data$higher_match[counter] <- TRUE
}
}
} else {
# case: gnr unable to resolve by name, fill with NA
man.data$resolved_names[counter] <- NA_character_
# edge case: check if tsn_id is not empty for row
if(!is.na(man.data$resolved_id_fromgnr[counter])) {
# fill in taxon info based on ID
id <- man.data$resolved_id_fromgnr[counter]
id2taxoninfo(id, counter, man.data)
# leave resolved information as NA and check match columns false
}
# edge case: unable to resolve name and tsn_id does not exist
else {
# check if id can be resolved with original, unresolved name
test_name <- man.data$preytype_validated[counter]
acquire_id(test_name, counter, man.data)
# see if id was able to be resolved
if (!is.na(man.data$resolved_id_fromgnr[counter])) {
# fill in taxon info from id
id2taxoninfo(man.data$resolved_id_fromgnr[counter], counter, man.data)
# leave resolved information as NA and check match columns false
}
# unable to get id from original name
else {
# fill ID with NA
man.data$resolved_id_fromgnr[counter] <- NA_character_
}
}
}
counter <- counter + 1
}
# convert to csv file
# write.csv(man.data, file.path("Llopiz_resolved.csv"))
# Llopiz_other <- Llopiz_resolved %>% filter(resolved_higher_order_fromgnr == "Other")
View(man.data)
abundance_path <- "/Users/jaxinewolfe/Documents/Research/PEP/NESLTER/Data/LlopizLab/Abundance/"
# Load Justin's data
diet_2013_2015 <- read_csv("Forage_Fish_Diet_Data_2013_2015_long.csv")
# Isolate and clean preytype
diet_2013_2015$preytype <- trimws(gsub('([[:upper:]])', ' \\1',
diet_2013_2015$preytype))
# merge data with ITIS resolved names and specified categorizations
diet_all <- left_join(x = diet_2013_2015, y = man.data,
by=(c("preytype"="Llopiz_preytypes")))
View(diet_2013_2015)
View(man.data)
# set preytype validated column as man.data
man.data <- cbind(man.data, preytype_lookup %>% select(Llopiz_preytypes))
View(man.data)
abundance_path <- "/Users/jaxinewolfe/Documents/Research/PEP/NESLTER/Data/LlopizLab/Abundance/"
# Load Justin's data
diet_2013_2015 <- read_csv("Forage_Fish_Diet_Data_2013_2015_long.csv")
# Isolate and clean preytype
diet_2013_2015$preytype <- trimws(gsub('([[:upper:]])', ' \\1',
diet_2013_2015$preytype))
# merge data with ITIS resolved names and specified categorizations
diet_all <- left_join(x = diet_2013_2015, y = man.data,
by=(c("preytype"="Llopiz_preytypes")))
write.csv(diet_all, file.path(abundance_path, "NESLTER_Diet_Taxa_2013_2015.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# local development only
rm(list=ls())
# set working directory
my_path <- "/Users/jaxinewolfe/Documents/Research/PEP/NESLTER/Data/LlopizLab/Abundance"
setwd(my_path)
# create ifelse statement to merge data if the file doesn't already exist
# if the file exists, load it
diet_all <- read_csv("NESLTER_Diet_Taxa_2013_2015.csv")
# if the file does NOT exist, merge the ITIS_Validation output
# valid_path <- "/Users/jaxinewolfe/Documents/Research/PEP/NESLTER/Data/LlopizLab/Abundance/itis_validation"
#
# # Load Justin's data
# diet_2013_2015 <- read_csv(file.path(valid_path,"Forage_Fish_Diet_Data_2013_2015_long.csv"))
# # Isolate and clean preytype
# diet_2013_2015$preytype <- trimws(gsub('([[:upper:]])', ' \\1',
#                                diet_2013_2015$preytype))
#
# # load resolved data
# resolved_data <- read_csv(file.path(valid_path,"Llopiz_resolved.csv"))
#
# # merge data with ITIS resolved names and specified categorizations
# diet_all <- left_join(x = diet_2013_2015, y = resolved_data,
#                           by=(c("preytype"="Llopiz_preytypes")))
# these cruises will be looped over to produce plots for each cruise
cruises <- unique(diet_all$Cruise)
# Data is in long format
# NOTE: The smallest individual unit is Cruise_Station_FishSpecies
# These summary sheets can be exported as needed
# Generate summary sheet with prey totals per Cruise_Station_FishSpecies
sca_preytot <- diet_all %>%
filter(count != "NA") %>%
group_by(Cruise, Station, Species, resolved_higher_order_fromgnr) %>%
# add prey items across fish from the same cruise and station
summarize(PreyTotal = sum(count))
sca_percent <- sca_preytot %>%
group_by(Species) %>%
# add column for percent composition
mutate(PreyPercent = (PreyTotal/sum(PreyTotal))*100)
# write.csv("LTER_SCA_percent.csv")
# Generate summary sheet with grand prey totals and richness
sca_summary <- sca_preytot %>%
group_by(Cruise, Station, Species) %>%
summarise(TotalCount = sum(PreyTotal),
PreyRichness = length(unique(resolved_higher_order_fromgnr)))
# GENERATE SUMMARY FIGURES
# Percent composition
# remember percentages are calculated for Cruise_Station_FishSpecies
ggplot(data = sca_percent, aes(Species, PreyPercent, fill = resolved_higher_order_fromgnr)) +
geom_col() +
scale_fill_brewer(palette = "Set3", na.value = "grey50") +
labs(title = "Diet Composition Per Fish", x = "Fish Species", y = "Percent Composition") +
theme_classic()
# ggsave("RelAbund_total.jpg")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(taxize)
# library(worrms)
library(plyr)
library(dplyr)
# library(tcltk)
# local development only
rm(list=ls())
# man.data <- read.csv(file.choose())
# man.data <- read.csv(tk_choose.files(caption = "Choose a .csv file to validate"))
my_path <- "/Users/jaxinewolfe/Documents/Research/PEP/NESLTER/Data/LlopizLab/Abundance/itis_validation"
setwd(my_path)
classification
classification("Gammarus", db = 'itis', rows = 1)
classification(91391, db = 'itis', rows = 1)
